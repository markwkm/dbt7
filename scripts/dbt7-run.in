#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

trap 'echo "Test was interrupted by Control-C."; \
killall sar sadc pidstat ts-${DATABASE}-stat > /dev/null 2>&1' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
killall sar sadc pidstat ts-${DATABASE}-stat > /dev/null 2>&1' TERM

COMMENT=""
FLAG_POWER_TEST=""
FLAG_THROUGHPUT_TEST=""
PRIVILEGED=0
PRIVILEGED_ARG="-U"
RUN_ALL_TESTS=1
RUN_LOAD_TEST=0
RUN_POWER_TEST=0
RUN_THROUGHPUT_TEST=0
OUTPUT_DIR=""
SCALE=1
SEED=0
STREAMS=1

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) workload runner

Usage:
  $(basename "${0}") [OPTION] DIRECTORY

Options:
  -1               run load test
  -2               run performance test
  -a DBMS          dbms under test (pgsql)
  -d DIALECT       dialect override
  -c COMMENT       comment about the test
  -g               generate data files, default no data generated
  -i INPUT         input override, default $INPUT
  -n STREAMS       number of throughput streams, default $STREAMS
  -o PATH          output directory
  -P               enable profiling (Linux only)
  -s SCALE         scale factor, default $SCALE
  -U               run test as a privileged user
  -V, --version    output version information, then exit
  -?, --help       show this help, then exit

PostgreSQL options (pgsql):
  -p PARAMETERS    database parameters for the load test
  -q PARAMETERS    database parameters for the performance test

@HOMEPAGE@
EOF
}

DATABASE=""
if [ -n "$DEFAULT_LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS="$DEFAULT_LOAD_PARAMETERS"
fi
if [ -n "$DEFAULT_PERF_PARAMETERS" ]; then
	PERF_PARAMETERS="$DEFAULT_PERF_PARAMETERS"
fi

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-1)
		RUN_LOAD_TEST=1
		RUN_ALL_TESTS=0
		;;
	(-2)
		RUN_POWER_TEST=1
		FLAG_POWER_TEST="-2"
		RUN_ALL_TESTS=0
		;;
	(-3)
		RUN_THROUGHPUT_TEST=1
		FLAG_THROUGHPUT_TEST="-3"
		RUN_ALL_TESTS=0
		;;
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-c)
		shift
		COMMENT="${1}"
		;;
	(-d)
		shift
		DIALECT="${1}"
		DIALECT_ARG="-d $DIALECT"
		;;
	(-g)
		GENERATE_DATA_FLAG="-g"
		;;
	(-i)
		shift
		INPUT="${1}"
		INPUT_ARG="-i $INPUT"
		;;
	(-n)
		shift
		STREAMS="${1}"
		;;
	(-o)
		OUTPUT_DIR="${OPTARG}"
		if [ -d "$OUTPUT_DIR" ]; then
			echo "Error, the directory \"$OUTPUT_DIR\" already exists."
			exit 1
		fi
		mkdir -p $OUTPUT_DIR
		;;
	(-P)
		PROFILE_FLAG="-Y"
		;;
	(-p)
		shift
		# PostgreSQL only.
		LOAD_PARAMETERS="$LOAD_PARAMETERS ${1}"
		;;
	(-q)
		shift
		# PostgreSQL only.
		PERF_PARAMETERS="$PERF_PARAMETERS ${1}"
		;;
	(-s)
		shift
		SCALE="${1}"
		;;
	(-S)
		shift
		SEED="${1}"
		;;
	(-U)
		PRIVILEGED=1
		PRIVILEGED_ARG=""
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x${DSTOOLS}" = "x" ]; then
	>&2 echo "Error: DSTOOLS environment variable is not set"
	exit 1
fi
if [ ! -d $DSTOOLS ]; then
	>&2 echo "Error: DSTOOLS dir does not exist: $DSTOOLS"
	exit 2
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	>&2 echo "Error: use -o to set output directory"
	exit 1
fi

if [ -n "$LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS_ARG="-p \"$LOAD_PARAMETERS\""
fi
if [ -n "$PERF_PARAMETERS" ]; then
	PERF_PARAMETERS_ARG="-p \"$PERF_PARAMETERS\""
fi

# Reset the flags to make the logic later in the script easier.
if [ $RUN_ALL_TESTS -eq 1 ]; then
	RUN_LOAD_TEST=1
	RUN_POWER_TEST=1
	RUN_THROUGHPUT_TEST=1
	FLAG_POWER_TEST="-2"
	FLAG_THROUGHPUT_TEST="-3"
fi

if [ "x${COMMENT}" != "x" ]; then
	echo "$COMMENT" > ${OUTPUT_DIR}/comment.txt
fi

# Save system details.
dbt7-get-config -a $DATABASE -o $OUTPUT_DIR -s $SCALE -n $STREAMS \
		-d $DIALECT -i $INPUT -p \"$LOAD_PARAMETERS\" -q \"$PERF_PARAMETERS\" 

SEED_FILE=${OUTPUT_DIR}/seed
if [ $SEED -ne 0 ]; then
	echo $SEED > $SEED_FILE
	echo "Using seed: `cat $SEED_FILE`"
fi

# Load Test
if [ $RUN_LOAD_TEST -eq 1 ]; then
	eval dbt7-load-test \
			-a $DATABASE \
			-o ${OUTPUT_DIR}/load \
			-s $SCALE \
			$GENERATE_DATA_FLAG \
			$LOAD_PARAMETERS_ARG \
			$PROFILE_FLAG \
			$PRIVILEGED_ARG \
			|| exit 1
elif [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-start-db -o $OUTPUT_DIR
fi

if [ $SEED -eq 0 ]; then
	# generate the initial seed according to Clause 4.3.1
	# the initial seed is the time stamp of the end of the database load time
	# expressed in the format mmddhhmmss.
	date +%-m%d%H%M%S > $SEED_FILE
fi

if [ $RUN_POWER_TEST -eq 1 ] || [ $RUN_THROUGHPUT_TEST -eq 1 ]; then
	# Start time of the Performance Test (Power and Throughput).
	echo "**`date` performance test starting**"
	S_TIME=`date +%s`
fi

if [ $RUN_POWER_TEST -eq 1 ]; then
	eval dbt7-power-test \
			-a $DATABASE \
			-s $SCALE \
			-o ${OUTPUT_DIR}/power \
			$DIALECT_ARG \
			$INPUT_ARG \
			$PERF_PARAMETERS_ARG\
			$PROFILE_FLAG \
			$PRIVILEGED_ARG
	if [ $? -eq 1 ] ; then
		2&> echo "Error: power test problem!"
		exit 1
	fi
fi

if [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	eval dbt7-throughput-test \
			-a $DATABASE \
			-s $SCALE \
			-n $STREAMS \
			-o ${OUTPUT_DIR}/throughput \
			$DIALECT_ARG \
			$INPUT_ARG \
			$THROUGHPUT_PARAMETERS_ARG \
			$PRIVILEGED_ARG \
			$PROFILE_FLAG
	if [ $? -eq 1 ] ; then
		2&> echo "throughput test problem!"
		exit 1
	fi
fi

if [ $RUN_POWER_TEST -eq 1 ] || [ $RUN_THROUGHPUT_TEST -eq 1 ]; then
	# End time of the Performance Test.
	E_TIME=`date +%s`
	DIFF_TIME=$(( $E_TIME - $S_TIME ))
	echo "**`date` performance test completed ($DIFF_TIME seconds)**"
fi

# Stop the database at the end of the test.
if [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db
fi

echo "Generating report... "
dbt7-generate-report -i $OUTPUT_DIR

echo ""
head ${OUTPUT_DIR}/summary.rst
echo "Full test summary in: ${OUTPUT_DIR}/summary.rst"
