#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

trap 'echo "Test was interrupted by Control-C."; \
killall sar sadc pidstat ts-${DATABASE}-stat > /dev/null 2>&1' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
killall sar sadc pidstat ts-${DATABASE}-stat > /dev/null 2>&1' TERM

COMMENT=""
DIALECT_ARG=""
FLAG_POWER_TEST=""
FLAG_THROUGHPUT_TEST=""
INPUT_ARG=""
PRIVILEGED=0
PRIVILEGED_ARG="-U"
RUN_ALL_TESTS=1
RUN_LOAD_TEST=0
RUN_POWER_TEST=0
RUN_THROUGHPUT_TEST=0
SCALE=1
SEED=0
STATS_ARG=""
STREAMS=4

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) workload runner

Usage:
  $(basename "${0}") [OPTION] DBMS DIRECTORY

Options:
  -d DIALECT, --dialect=DIALECT
                   dialect override, default matches DBMS
  -c COMMENTS, --comment=COMMENTS
                   provide COMMENTS about the test
  -i INPUT, --input=INPUT
                   input override, default
                   DSHOME/query_templates/templates-DBMS.lst
  --load          run load test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  -n STREAMS, --streams=STREAMS
                   number of throughput streams, default $STREAMS
  --power         run power test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  --privileged     run test as a privileged user
  --profile        enable profiling (Linux only)
  -s SCALE_FACTOR, --scale-factor=SCALE_FACTOR
                   scale factor, default $SCALE
  --seed=SEED      set SEED, default is a random number
  --stats          enable system and database stats collection
  --tpcdstools=DSHOME
                   DSHOME is the directory location of the TPC-DS Tools
  --throughput    run throughput test, default run load, power and throughput,
                  selecting individual tests disables the other tests unless
                  explicitly specified again
  -V, --version    output version information, then exit
  -?, --help       show this help, then exit

DBMS options are:
  pgsql            PostgreSQL

DIRECTORY is the path to save test results.

PostgreSQL options (pgsql):
  --load-parameters PARAMETERS
                   database parameters for the load test
  --performance-parameters PARAMETERS
                   database parameters for the performance test

@HOMEPAGE@
EOF
}

if [ -n "$DEFAULT_LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS="$DEFAULT_LOAD_PARAMETERS"
fi
if [ -n "$DEFAULT_PERF_PARAMETERS" ]; then
	PERF_PARAMETERS="$DEFAULT_PERF_PARAMETERS"
fi

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-c | --comment)
		shift
		COMMENT="${1}"
		;;
	(--comment=?*)
		COMMENT="${1#*--comments=}"
		;;
	(-d | --dialect)
		shift
		DIALECT_ARG="-d ${1}"
		;;
	(--dialect=?*)
		DIALECT_ARG="-d ${1#*--dialect=}"
		;;
	(-i | --input)
		shift
		INPUT="${1}"
		INPUT_ARG="-i $INPUT"
		;;
	(--input=?*)
		INPUT_ARG="-i ${1#*--input=}"
		;;
	(--load)
		RUN_LOAD_TEST=1
		RUN_ALL_TESTS=0
		;;
	(-n | --streams)
		shift
		STREAMS="${1}"
		;;
	(--streams=?*)
		STREAMS="${1#*--streams=}"
		;;
	(--power)
		RUN_POWER_TEST=1
		FLAG_POWER_TEST="-2"
		RUN_ALL_TESTS=0
		;;
	(--profile)
		PROFILE_FLAG="-Y"
		;;
	(--load-parameters)
		shift
		LOAD_PARAMETERS="$LOAD_PARAMETERS ${1}"
		;;
	(--load-parameters=?*)
		LOAD_PARAMETERS="$LOAD_PARAMETERS ${1#*--load-parameters=}"
		;;
	(--performance-parameters)
		shift
		PERF_PARAMETERS="$PERF_PARAMETERS ${1}"
		;;
	(--performance-parameters=?*)
		shift
		PERF_PARAMETERS="$PERF_PARAMETERS ${1#*--performance-parameters=}"
		;;
	(--privileged)
		PRIVILEGED=1
		PRIVILEGED_ARG=""
		;;
	(-s | --scale-factor)
		shift
		SCALE="${1}"
		;;
	(--scale-factor=?*)
		SCALE="${1#*--scale-factor=}"
		;;
	(--seed)
		shift
		SEED="${1}"
		;;
	(--seed=?*)
		SEED="${1#*--seed=}"
		;;
	(--stats)
		STATS_ARG="--stats"
		;;
   (--tpcdstools)
		shift
		DSHOME="${1}"
		;;
   (--tpcdstools=?*)
		DSHOME="${1#*--tpcdstools=}"
		;;
	(--throughput)
		RUN_THROUGHPUT_TEST=1
		FLAG_THROUGHPUT_TEST="-3"
		RUN_ALL_TESTS=0
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

# Set up environment based on $DSHOME

if [ "${DSHOME}" = "" ]; then
	printf "Specify DSHOME directory, try \"%s -?\" " \
			"$(basename "${0}")" 1>&2
	echo "for more information." 1>&2
	exit 1
fi
export DSHOME
if [ ! -d "${DSHOME}" ]; then
	>&2 echo "ERROR: DSHOME dir does not exist: ${DSHOME}"
	exit 2
fi
export DSTOOLS="${DSHOME}/tools"
export DSQUERY="${DSHOME}/query_templates"
export DSDISTRIBUTIONS="${DSTOOLS}/tpcds.idx"

# Process the rest of the command line arguments.

if [ "${#}" -eq 0 ]; then
	printf "Specify which DBMS to test, try \"%s -?\" " \
			"$(basename "${0}")" 1>&2
	echo "for more information." 1>&2
	exit 1
fi
DATABASE=${1}
shift

if [ "${#}" -eq 0 ]; then
	printf "ERROR: Specify DIRECTORY to save results, try \"%s -?\" " \
			"$(basename "${0}")" 1>&2
	echo "for more information." 1>&2
	exit 1
fi

if [ "${DIALECT_ARG}" = "" ]; then
	if [ "${DATABASE}"  = "pgsql" ]; then
		DIALECT_ARG="-d postgresql"
	else
		prints "Unsupported DBMS '${DATABASE}', try \"%s -?\" " \
				"$(basename "${0}")" 1>&2
		echo "for more information." 1>&2
		exit 1
	fi
fi
if [ "${INPUT_ARG}" = "" ]; then
	if [ "${DATABASE}"  = "pgsql" ]; then
		INPUT_ARG="-i ${DSQUERY}/templates-postgresql.lst"
	else
		printf "Unsupported DBMS '${DATABASE}', try \"%s -?\" " \
				"$(basename "${0}")" 1>&2
		echo "for more information." 1>&2
		exit 1
	fi
fi

OUTPUT_DIR=${1}
if [ -d "${OUTPUT_DIR}" ]; then
	>&2 echo "ERROR: Specify new location, '${OUTPUT_DIR}' already exists"
	exit 1
fi
mkdir -p ${OUTPUT_DIR}

if [ -n "$LOAD_PARAMETERS" ]; then
	LOAD_PARAMETERS_ARG="-p \"$LOAD_PARAMETERS\""
fi
if [ -n "$PERF_PARAMETERS" ]; then
	PERF_PARAMETERS_ARG="-p \"$PERF_PARAMETERS\""
fi

# Reset the flags to make the logic later in the script easier.
if [ $RUN_ALL_TESTS -eq 1 ]; then
	RUN_LOAD_TEST=1
	RUN_POWER_TEST=1
	RUN_THROUGHPUT_TEST=1
	FLAG_POWER_TEST="-2"
	FLAG_THROUGHPUT_TEST="-3"
fi

if [ "x${COMMENT}" != "x" ]; then
	echo "$COMMENT" > ${OUTPUT_DIR}/comment.txt
fi

# Save system details.
eval "dbt7-get-config -a $DATABASE -o $OUTPUT_DIR -s $SCALE -n $STREAMS \
		${DIALECT_ARG} ${INPUT_ARG} -p \"${LOAD_PARAMETERS}\" \
		-q \"${PERF_PARAMETERS}\""

# Load Test
if [ $RUN_LOAD_TEST -eq 1 ]; then
	eval "dbt7-load-test \
			-a $DATABASE \
			-o ${OUTPUT_DIR}/load \
			-s $SCALE \
			$LOAD_PARAMETERS_ARG \
			$PROFILE_FLAG \
			$PRIVILEGED_ARG \
			${STATS_ARG}" \
			|| exit 1
elif [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-start-db -o $OUTPUT_DIR
fi

SEED_FILE=${OUTPUT_DIR}/seed
if [ $SEED -ne 0 ]; then
	echo $SEED > $SEED_FILE
	echo "Using seed: `cat $SEED_FILE`"
else
	# generate the initial seed according to Clause 4.3.1
	# the initial seed is the time stamp of the end of the database load time
	# expressed in the format mmddhhmmss.
	date +%-m%d%H%M%S > $SEED_FILE
fi

if [ $RUN_POWER_TEST -eq 1 ] || [ $RUN_THROUGHPUT_TEST -eq 1 ]; then
	# Start time of the Performance Test (Power and Throughput).
	echo "**`date` performance test starting**"
	S_TIME=`date +%s`
fi

if [ $RUN_POWER_TEST -eq 1 ]; then
	eval "dbt7-power-test \
			-a $DATABASE \
			-s $SCALE \
			-o ${OUTPUT_DIR}/power \
			$DIALECT_ARG \
			$INPUT_ARG \
			$PERF_PARAMETERS_ARG\
			$PROFILE_FLAG \
			$PRIVILEGED_ARG \
			${STATS_ARG}"
	if [ $? -eq 1 ] ; then
		2&> echo "Error: power test problem!"
		exit 1
	fi
fi

if [ ${RUN_THROUGHPUT_TEST} -eq 1 ]; then
	eval "dbt7-throughput-test \
			-a $DATABASE \
			-s $SCALE \
			-n $STREAMS \
			-o ${OUTPUT_DIR}/throughput \
			$DIALECT_ARG \
			$INPUT_ARG \
			$THROUGHPUT_PARAMETERS_ARG \
			$PRIVILEGED_ARG \
			$PROFILE_FLAG \
			${STATS_ARG}"
	if [ $? -eq 1 ] ; then
		2&> echo "throughput test problem!"
		exit 1
	fi
fi

if [ $RUN_POWER_TEST -eq 1 ] || [ $RUN_THROUGHPUT_TEST -eq 1 ]; then
	# End time of the Performance Test.
	E_TIME=`date +%s`
	DIFF_TIME=$(( $E_TIME - $S_TIME ))
	echo "**`date` performance test completed ($DIFF_TIME seconds)**"
fi

# Stop the database at the end of the test.
if [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db
fi

echo "Generating report... "
dbt7-generate-report -i $OUTPUT_DIR

echo ""
head ${OUTPUT_DIR}/summary.rst
echo "Full test summary in: ${OUTPUT_DIR}/summary.rst"
