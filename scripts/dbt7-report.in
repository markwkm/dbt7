#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors
#

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) report generator

Usage:
  $(basename "${0}") [OPTION] DIRECTORY

Options:
  --skip-process-plotting
                   don't plot per process statistics
  -V, --version    output version information, then exit
  -?, --help       show this help, then exit

DIRECTORY is the path to DBT-7 results.

@HOMEPAGE@
EOF
}

create_sar_page()
{
	TITLE=${1}
	STATNAME=${2}
	SARPLOTDIR=${3}
	ODIR=${4}

	mkdir -p $ODIR

	cat > ${ODIR}/index.rst << __EOF__
================================================================================
Database Test 7 ${TITLE} ${STATNAME} Charts
================================================================================

$(show_images "${SARPLOTDIR}" "${STATNAME}")
__EOF__
}

sar_links() {
	TESTNAME=${1}

	TESTDIR="${INDIR}/${TESTNAME}"
	if [ ! -f "${TESTDIR}/sysstat/sar.datafile" ]; then
		return
	fi

	cat << __EOF__
\`CPU <${TESTNAME}/sysstat/report/cpu/>\`__ \`Memory <${TESTNAME}/sysstat/report/mem/>\`__ \`Blockdev <${TESTNAME}/sysstat/report/blockdev/>\`__ \`Network <${TESTNAME}/sysstat/report/net/>\`__ \`Paging <${TESTNAME}/sysstat/report/paging/>\`__ \`Swap <${TESTNAME}/sysstat/report/swap/>\`__
__EOF__

	for STATNAME in cpu mem blockdev net paging swap; do
		create_sar_page "${TESTNAME}" "${STATNAME}" \
				"${TESTDIR}/sysstat/sar/plots" \
				"${TESTDIR}/sysstat/report/${STATNAME}"
	done
}

show_images()
{
	SARPLOTDIR=${1}
	STATNAME=$2

	find "${SARPLOTDIR}" -name "sar-${STATNAME}*.png" | sort -n | \
			while IFS= read -r CHART
	do
		FNAME=$(basename "${CHART}")
		echo ".. image:: ../../sar/plots/${STATNAME}/${FNAME}"
		echo "   :target: ../../sar/plots/${STATNAME}/${FNAME}"
		echo "   :width: 100%"
		echo ""
	done
}

write_system_stats()
{
	TEST=$1

	cat << __EOF__
System Statistics
=================

Processor Statistics
--------------------

__EOF__

	find "${OUTDIR}/${TEST}/sysstat/sar" -name "sar-cpu?*.png" | \
			while IFS= read -r PNGFILE; do
		cat <<- __EOF__
			.. image:: ${TEST}/sar/$(basename "${PNGFILE}")
			   :width: 100%

__EOF__
	done

	cat << __EOF__
Block Device Statistics
-----------------------

__EOF__

	find "${OUTDIR}/${TEST}/sysstat/sar" -name "sar-blockdev-*-*.png" | \
			while IFS= read -r PNGFILE; do
		cat <<- __EOF__
			.. image:: ${TEST}/sar/$(basename "${PNGFILE}")
			   :width: 100%

__EOF__
	done
}

PLOT_PROCESSES=1

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(--skip-process-plotting)
		PLOT_PROCESSES=0
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "${#}" -eq 0 ]; then
	printf "Specify dbt7 results directory, try \"%s -?\" " \
			"$(basename "${0}")" 1>&2
	echo "for more information." 1>&2
	exit 1
fi

INDIR="${1}"
OUTDIR="${INDIR}"

REPORT="${OUTDIR}/report.rst"
REPORTLOAD="${OUTDIR}/report-load.rst"
REPORTPOWER="${OUTDIR}/report-power.rst"
REPORTTHROUGHPUT="${OUTDIR}/report-throughput.rst"
ERRLOG="${OUTDIR}/error.txt"

DIRLOAD="${INDIR}/load"
DIRPOWER="${INDIR}/power"
DIRTHROUGHPUT="${INDIR}/throughput"

CONFIGFILE="${INDIR}/config.txt"
CPU_MODEL=`grep "^model" $CONFIGFILE | cut -d ":" -f2-`
CPUS=`grep ^cpus $CONFIGFILE | cut -d ":" -f2-`
DBMS=$(grep "^dbms" $CONFIGFILE | awk '{print $2}')
KERNEL=`grep ^kernel $CONFIGFILE | cut -d ":" -f2-`
OS=`grep ^distribution $CONFIGFILE | cut -d ":" -f2-`
RAM=`grep ^memory $CONFIGFILE | cut -d ":" -f2-`
SCALE=`grep ^scale $CONFIGFILE | cut -d ":" -f2-`

dbt7-plot-results -i ${INDIR}/power/time_statistics.csv -o ${OUTDIR} \
		2> /dev/null

for DIR in load power throughput; do
	SARDIR="${OUTDIR}/${DIR}/sysstat/sar"
	if [ -d "${SARDIR}" ]; then
		ts plot-sar -i "${SARDIR}" -o "${SARDIR}/plots" &
	fi
done
wait

# Set the spar vs pidstat image file name prefix here.
PIDPREFIX="spar"
# shellcheck disable=SC2044
for PIDSTATFILE in $(find "${INDIR}" -type f -name pidstat.txt 2> /dev/null);
do
	PIDPREFIX="pidstat"
	ts process-pidstat -i "${PIDSTATFILE}" &
done
wait

for DIR in load power throughput; do
	# Juggle filename depending on whether pidstat or spar was used.
	PIDSTATFILE="${OUTDIR}/${DIR}/sysstat/${PIDPREFIX}.txt"
	PIDSTATCSV="${OUTDIR}/${DIR}/sysstat/pidstat.csv"
	if [ "${PIDPREFIX}" = "spar" ]; then
		PIDSTATCSV="${OUTDIR}/${DIR}/sysstat/spar.txt"
	fi

	if [ ${PLOT_PROCESSES} -eq 1 ] && [ -f "${PIDSTATCSV}" ]; then
		ts plot-${PIDPREFIX} -i "${PIDSTATCSV}" \
				-o "${OUTDIR}/${DIR}/sysstat/pidstat/plots" &
	fi
done
wait

SUMMARY="${INDIR}/summary.rst"
if [ ! -f "$SUMMARY" ]; then
	if [ -d "$DIRLOAD" ]; then
		FLAGS="-1 $DIRLOAD"
	fi
	if [ -d "$DIRPOWER" ]; then
		FLAGS="$FLAGS -2 $DIRPOWER"
	fi
	if [ -d "$DIRTHROUGHPUT" ]; then
		FLAGS="$FLAGS -3 $DIRTHROUGHPUT"
	fi
	eval "dbt7-post-process ${FLAGS} -o ${INDIR}"
fi

README="${DIRPOWER}/dbstat/readme-${DBMS}.txt"
if [ -f "$README" ]; then
	DBVER=`head -n 1 $README`
fi
if [ "x$DBVER" = "x" ]; then
	README="${DIRTHROUGHPUT}/readme.txt"
	if [ -f "${README}" ]; then
		DBVER=$(head -n 1 "${README}")
	fi
fi

cat << __EOF__ > $REPORT
$(cat $SUMMARY)

Power Test
==========

.. image:: power.png
   :alt: Missing Power Test Query Times
   :width: 100%

System Configuration
====================

Hardware Information
--------------------

* CPU Type: $CPU_MODEL
* Total Processors: $CPUS
* Memory: $RAM KB RAM

Software Information
--------------------

* Operating System: $OS $KERNEL
* Database Server: $DBVER

System Statistics
=================

Load Test
---------

* Charts: $(sar_links load)

Power Test
----------

* Charts: $(sar_links power)

Throughput Test
---------------

* Charts: $(sar_links throughput)

$(eval "dbt7 ${DBMS}-report -i ${INDIR}")
__EOF__

#
# Generate Load Test Report
#

cat << __EOF__ > $REPORTLOAD
=========================
Database Test 7 Load Test
=========================

================  ===================  ===================  ===============
Phase             Start Timestamp      End Timestamp        Elapsed Time
================  ===================  ===================  ===============
__EOF__

grep -v "^stream" "${DIRLOAD}/time_statistics.csv" | while IFS= read -r LINE
do
	printf "%16s  %s  %s  %s\n" \
			"$(echo "${LINE}" | cut -d "," -f 3)" \
			"$(echo "${LINE}" | cut -d "," -f 4)" \
			"$(echo "${LINE}" | cut -d "," -f 5)" \
			"$(echo "${LINE}" | cut -d "," -f 6)" \
			>> "${REPORTLOAD}"
done

cat << __EOF__ >> $REPORTLOAD
================  ===================  ===================  ===============

$(write_system_stats load)
__EOF__

#
# Generate Power Test Report
#

cat << __EOF__ > "${REPORTPOWER}"
==========================
Database Test 7 Power Test
==========================

$(write_system_stats power)
__EOF__

#
# Generate Throghput Test Report
#

cat << __EOF__ > "${REPORTTHROUGHPUT}"
===============================
Database Test 7 Throughput Test
===============================

$(write_system_stats throughput)
__EOF__

echo "Generated text file reports:"
ls -1v ${OUTDIR}/*.rst
echo ""

#
# Convert reStructuredText files to HTML and PDF.
#

RST2HTML5=""
for POSSIBILITY in rst2html5.py rst2html5; do
	which $POSSIBILITY > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		RST2HTML5="$POSSIBILITY"
		break
	fi
done

if [ ! "x${RST2HTML5}" = "x" ]; then
	# pandoc can't properly convert multi-cell table headings from rst but
	# Sphinx's rst2html can. Then pandoc can convert multi-cell table headings
	# from html to pdf.
	$RST2HTML5 ${OUTDIR}/report.rst ${OUTDIR}/report.html 2> /dev/null
	for RST in $(find $INDIR -name "*.rst"); do
		NAME="${RST%.*}"
		(cd $(dirname $RST) && \
				$RST2HTML5 $(basename $RST) ${NAME}.html 2> /dev/null)
	done

	echo "Generated HTML reports:"
	ls -1v ${OUTDIR}/*.html
	echo ""

	if [ "${GENERATE_PDF}" = "1" ]; then
		# A pdf could be produced other ways, but I believe pandoc produces the
		# most minimally styled LaTeX looking document, as opposed to using
		# rst2latex, with default settings.
		which pandoc > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			(cd $OUTDIR && \
					pandoc -s report.html -f html -t pdf \
							-o report.pdf 2> /dev/null) &
			for HTML in $(find $INDIR -name "*.html"); do
				NAME="${HTML%.*}"
				(cd $(dirname $HTML) && \
						pandoc -s $(basename $HTML) -f html -t pdf \
								-o ${NAME}.pdf 2> /dev/null) &
			done
			wait

			echo "Generated PDF reports:"
			ls -1v ${OUTDIR}/*.pdf
			echo ""
		else
			echo "pandoc required to generate pdf report"
			exit 1
		fi
	fi
else
	echo "rst2html5 required to generate html report"
	exit 1
fi
