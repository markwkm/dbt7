#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

GENERATE_DATA=0
PRIVILEGED=1
PROFILE=0
SCALE=1
STATS=0

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) load tester

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS          DBMS: pgsql
  -g               generate data files, default no data generated
  -o PATH          PATH to save results
  -s SCALE         scale factor, default $SCALE
  --stats          enable system and database stats collection
  -U               run test as an unprivileged user
  -V, --version    output version information, then exit
  -Y               enable profiling
  -?, --help       show this help, then exit

DBMS options are:
  pgsql            PostgreSQL

PostgreSQL options (pgsql):
  -p PARAMETERS    database PARAMETERS

@HOMEPAGE@
EOF
}

bailout()
{
	echo ""
	echo "***ERROR: $(date)***"
	echo "see full output in: $OUTPUTFILE"
	tail $OUTPUTFILE
	echo ""
	exit 1
}

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-g)
		GENERATE_DATA=1
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		mkdir -p $OUTPUT_DIR
		;;
	(-p)
		shift
		PARAMETERS_ARG="-p \"$1\""
		;;
	(-s)
		shift
		SCALE="${1}"
		;;
	(--stats)
		STATS=1
		;;
	(-U)
		PRIVILEGED=0
		PRIVILEGED_ARG="-U"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-Y)
		PROFILE=1
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x$DATABASE" = "x" ]; then
	2&> echo "Error: Specify database management system with -a flag"
	usage
	exit 1
fi

if [ "x$OUTPUT_DIR" = "x" ]; then
	2&> echo "Error: Specify results directory with -o flag"
	usage
	exit 1
fi

echo "**`date` load test prep**"

OUTPUTFILE="${OUTPUT_DIR}/output.txt"

SEED_FILE="${OUTPUT_DIR}/../seed"
if [ -f "$SEED_FILE" ]; then
	echo "Using generated seed file..."
	read SEED < $SEED_FILE
	SEED_ARG="-S $SEED"
fi

# Save dsdgen info.
(cd "${DSTOOLS}" && \
		./dsdgen \
				-TABLE dbgen_version \
				-DIR $OUTPUT_DIR \
				-SCALE $SCALE \
				$RNGSEED_ARG \
				> ${OUTPUT_DIR}/dsdgen.txt 2>&1 \
) || bailout

# Generate database data
if [ $GENERATE_DATA -eq 1 ]; then
	# Determine number of processors for parallelism.
	CPUS=1
	if [ -f "/proc/stat" ]; then
		CPUS=`grep cpu /proc/stat | wc -l`
		CPUS=$(( $CPUS - 1 ))
		echo "detected $CPUS processors for parallel data generation and loading"
	fi

	# Use a separate seed for generating data
	DGENSEED=`date +%-m%d%H%M%S`
	echo "data generation seed: $DGENSEED"
	mkdir -p $DS_DATA
	for I in `seq 1 $I`; do
		(cd "${DSTOOLS}" && \
				./dsdgen \
						-DIR $DS_DATA \
						-SCALE $SCALE \
						-TERMINATE N \
						-PARALLEL $CPUS \
						-CHILD $I \
						-RNGSEED $DGENSEED \
						2> /dev/null \
		) &
	done
	wait
fi

if [ "${STATS}" -eq 1 ]; then
	# Start collecting system statistics.
	ts-sysstat -o "${OUTPUT_DIR}/sysstat"
fi

if [ "${PRIVILEGED}" -eq 1 ]; then
	eval "dbt7-${DATABASE}-create-db -o $OUTPUT_DIR $PARAMETERS_ARG \
			${PRIVILEGED_ARG}" >> $OUTPUTFILE 2>&1
fi

dbt7-${DATABASE}-drop-tables >> $OUTPUTFILE 2>&1 || bailout
dbt7-${DATABASE}-create-tables >> $OUTPUTFILE 2>&1 || bailout

if [ "${STATS}" -eq 1 ]; then
	# Collect database statistics
	eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat"
fi

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" sleep 1
fi

echo "**`date` load test starting**"
S_TIME=`date +%s`
dbt7-${DATABASE}-time-statistics -s -n LOADTEST || bailout

eval $PERFCOMMAND dbt7-${DATABASE}-load-data -s $SCALE $SEED_ARG \
		$PRIVILEGED_ARG >> $OUTPUTFILE 2>&1 || bailout

dbt7-${DATABASE}-time-statistics -e -n LOADTEST || bailout
E_TIME=`date +%s`
DIFF_TIME=`expr $E_TIME - $S_TIME`
echo "**`date` load test completed  ($DIFF_TIME seconds)**"

if [ "${STATS}" -eq 1 ]; then
	ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s
	eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"
fi

dbt7-${DATABASE}-get-query-time -o $OUTPUT_DIR

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" -p
fi
