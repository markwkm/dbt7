#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

GENERATE_DATA=0
PRIVILEGED=1
PROFILE=0
SCALE=1

usage()
{
	echo "`basename $0` is the DBT-7 Load Test"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTION]"
	echo ""
	echo "Options:"
	echo "  -a DBMS          database management system: pgsql"
	echo "  -g               generate data files, default no data generated"
	echo "  -o PATH          path to save results"
	echo "  -s SCALE         scale factor, default $SCALE"
	echo "  -U               run test as an unprivileged user"
	echo "  -Y               enable profiling"
	echo ""
	echo "PostgreSQL options (pgsql):"
	echo "  -p PARAMETERS    PostgreSQL parameters"
}

bailout()
{
	echo ""
	echo "***ERROR: $(date)***"
	echo "see full output in: $OUTPUTFILE"
	tail $OUTPUTFILE
	echo ""
	exit 1
}

while getopts "a:gho:p:s:UY" OPT; do
	case $OPT in
	a)
		DATABASE=$OPTARG
		;;
	g)
		GENERATE_DATA=1
		;;
	h)
		usage
		exit 0
		;;
	o)
		OUTPUT_DIR=$OPTARG
		mkdir -p $OUTPUT_DIR
		;;
	p)
		PARAMETERS_ARG="-p \"$OPTARG\""
		;;
	s)
		SCALE=$OPTARG
		;;
	U)
		PRIVILEGED=0
		PRIVILEGED_ARG="-U"
		;;
	Y)
		PROFILE=1
		;;
	\?)
		usage
		exit 1
	esac
done

if [ "x$DATABASE" = "x" ]; then
	2&> echo "Error: Specify database management system with -a flag"
	usage
	exit 1
fi

if [ "x$OUTPUT_DIR" = "x" ]; then
	2&> echo "Error: Specify results directory with -o flag"
	usage
	exit 1
fi

echo "**`date` load test prep**"

OUTPUTFILE="${OUTPUT_DIR}/output.txt"

SEED_FILE="${OUTPUT_DIR}/../seed"
if [ -f "$SEED_FILE" ]; then
	echo "Using generated seed file..."
	read SEED < $SEED_FILE
	SEED_ARG="-S $SEED"
fi

# Save dsdgen info.
(cd $DSTOOLS && \
		./dsdgen \
				-TABLE dbgen_version \
				-DIR $OUTPUT_DIR \
				-SCALE $SCALE \
				$RNGSEED_ARG \
				> ${OUTPUT_DIR}/dsdgen.txt 2>&1 \
) || bailout

# Generate database data
if [ $GENERATE_DATA -eq 1 ]; then
	# Determine number of processors for parallelism.
	CPUS=1
	if [ -f "/proc/stat" ]; then
		CPUS=`grep cpu /proc/stat | wc -l`
		CPUS=$(( $CPUS - 1 ))
		echo "detected $CPUS processors for parallel data generation and loading"
	fi

	# Use a separate seed for generating data
	DGENSEED=`date +%-m%d%H%M%S`
	echo "data generation seed: $DGENSEED"
	mkdir -p $DS_DATA
	for I in `seq 1 $I`; do
		(cd $DSTOOLS && \
				./dsdgen \
						-DIR $DS_DATA \
						-SCALE $SCALE \
						-TERMINATE N \
						-PARALLEL $CPUS \
						-CHILD $I \
						-RNGSEED $DGENSEED \
						2> /dev/null \
		) &
	done
	wait
fi

# Start collecting system statistics.
ts-sysstat -o "${OUTPUT_DIR}/sysstat"

if [ "${PRIVILEGED}" -eq 1 ]; then
	eval "dbt7-${DATABASE}-create-db -o $OUTPUT_DIR $PARAMETERS_ARG \
			${PRIVILEGED_ARG}" >> $OUTPUTFILE 2>&1
fi

dbt7-${DATABASE}-drop-tables >> $OUTPUTFILE 2>&1 || bailout
dbt7-${DATABASE}-create-tables >> $OUTPUTFILE 2>&1 || bailout

# Collect database statistics
eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat"

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" sleep 1
fi

echo "**`date` load test starting**"
S_TIME=`date +%s`
dbt7-${DATABASE}-time-statistics -s -n LOADTEST || bailout

eval $PERFCOMMAND dbt7-${DATABASE}-load-data -s $SCALE $SEED_ARG \
		$PRIVILEGED_ARG >> $OUTPUTFILE 2>&1 || bailout

dbt7-${DATABASE}-time-statistics -e -n LOADTEST || bailout
E_TIME=`date +%s`
DIFF_TIME=`expr $E_TIME - $S_TIME`
echo "**`date` load test completed  ($DIFF_TIME seconds)**"

ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s
eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"

dbt7-${DATABASE}-get-query-time -o $OUTPUT_DIR

if [ $PROFILE -eq 1 ]; then
	ts-profile -o "${OUTPUT_DIR}/profile" -p
fi
