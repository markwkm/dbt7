#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

PRIVILEGED=1
RESTART=0
PROFILE=0
STATS=0

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) power tester

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS          database management system: pgsql
  -d DIALECT       dialect override
  -o PATH          path to save results
  -i INPUT         input override, default $INPUT
  -n STREAMS       number of streams
  -r               restart database, if already running
  -s SCALE         scale factor, default $SCALE
  --stats          enable system and database stats collection
  -U               run test as an unprivileged user
  -V, --version    output version information, then exit
  -Y               enable profiling"
  -?, --help       show this help, then exit

PostgreSQL options (pgsql):
  -p PARAMETERS    PostgreSQL parameters

@HOMEPAGE@
EOF
}

run_data_maintenance()
{
	NUM=$1

	STREAM_START=$(( 1 + ($STREAMS * ($NUM - 1)) ))
	STREAM_END=$(( $STREAMS * $NUM ))

	echo "**`date` data maintenance test $NUM starting**"
	S_TIME_POWER=`date +%s`
	eval "dbt7-${DATABASE}-time-statistics -s -n DATAMAINT${NUM}"
	for I in `seq $STREAM_START $STREAM_END`; do
	   eval "dbt7-${DATABASE}-data-maintenance -i ${OUTPUT_DIR}/.. \
				-o ${OUTPUT_DIR} -n $I ${PRIVILEGED_ARG}" \
				> ${OUTPUT_DIR}/dm_${I}.txt 2>&1
	done
	eval "dbt7-${DATABASE}-time-statistics -e -n DATAMAINT${NUM}"
	E_TIME_POWER=`date +%s`
	DIFF_TIME=$(( $E_TIME_POWER - $S_TIME_POWER ))
	echo "**`date` data maintenance test $NUM completed ($DIFF_TIME seconds)**"
}

run_queries()
{
	NUM=$1

	QFILE="${OUTPUT_FILE}/query_${NUM}.sql"
	if [ -f "$QFILE" ]; then
		echo "Error: query file $NUM is missing, aborting..."
		exit 1
	fi

	STREAM_START=$(( 1 + ($STREAMS * ($NUM - 1)) ))
	STREAM_END=$(( $STREAMS * $NUM ))

	echo "**`date` throughput test $NUM starting**"
	S_TIME_POWER=`date +%s`

	dbt7-${DATABASE}-time-statistics -s -n THROUGHPUT${NUM} || exit 1
	for STREAM in `seq $STREAM_START $STREAM_END`; do
		dbt7-${DATABASE}-run-stream -s $STREAM -o $OUTPUT_DIR &
	done
	wait
	dbt7-${DATABASE}-time-statistics -e -n THROUGHPUT${NUM} || exit 1
	E_TIME_POWER=`date +%s`

	DIFF_TIME=$(( $E_TIME_POWER - $S_TIME_POWER ))
	echo "**`date` throughput test $NUM completed ($DIFF_TIME seconds)**"
}

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-d)
		shift
		DIALECT="${1}"
		;;
	(-n)
		shift
		STREAMS="${1}"
		;;
	(-i)
		shift
		INPUT_ARG="-INPUT ${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		mkdir -p $OUTPUT_DIR
		;;
	(-p)
		shift
		PARAMETERS_ARG="-p \"${1}\""
		;;
	(-r)
		RESTART=1
		;;
	(-s)
		shift
		SCALE="${1}"
		;;
	(-S)
		shift
		SEED_FILE="${1}"
		;;
	(--stats)
		STATS=1
		;;
	(-U)
		PRIVILEGED=0
		PRIVILEGED_ARG="-U"
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-Y)
		PROFILE=1
		LINUXPERF_FLAG="-Y"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x${DATABASE}" = "x" ]; then
	>&2 echo "Error: Specify database management system with -a flag"
	exit 1
fi

if [ "x${STREAMS}" = "x" ]; then
	>&2 echo "Error: Specify the number of streams with -n flag"
	exit 1
fi

if [ "x${DSTOOLS}" = "x" ]; then
	>&2 echo "Error: DSTOOLS environment variable not set"
	exit 1
fi
if [ ! -d $DSTOOLS ]; then
	>&2 echo "Error: DSTOOLS dir does not exist: $DSTOOLS"
	exit 2
fi

if [ "x${DIALECT}" = "x" ]; then
	DIALECT=$DATABASE
fi

echo $STREAMS > ${OUTPUT_DIR}/streams

echo "**`date` throughput tests prep**"

# If a seed file wasn't provided per spec, then don't specify one.
SEED_FILE="${OUTPUT_DIR}/../seed"
if [ -f "$SEED_FILE" ]; then
	read SEED < $SEED_FILE
	echo "Using generated seed file: $SEED"
	RNGSEED_ARG="-RNGSEED $SEED"
fi

# Save dsdgen info.
eval "${DSTOOLS}/dsdgen \
		-DISTRIBUTIONS ${DSDISTRIBUTIONS} \
		-TABLE dbgen_version \
		-DIR $OUTPUT_DIR \
		-SCALE $SCALE \
		${RNGSEED_ARG}" \
		> ${OUTPUT_DIR}/dsdgen.txt 2>&1 || exit 1

# Generate the queries.  Clause 4.3.2
TOTAL_STREAMS=$(( ($STREAMS * 2) + 1 ))
eval "${DSTOOLS}/dsqgen \
		-DISTRIBUTIONS ${DSDISTRIBUTIONS} \
		-DIALECT $DIALECT \
		-OUTPUT_DIR $OUTPUT_DIR \
		-SCALE $SCALE \
		-DIRECTORY $DSQUERY \
		-STREAMS $TOTAL_STREAMS \
		-LOG ${OUTPUT_DIR}/query-parameter.log \
		$INPUT_ARG \
		$TEMPLATE_ARG \
		${RNGSEED_ARG}" \
		> ${OUTPUT_DIR}/dsqgen.txt 2>&1 || exit 1

# Determine number of processors for parallelism.
CPUS=1
if [ -f "/proc/stat" ]; then
	CPUS=`grep cpu /proc/stat | wc -l`
	CPUS=$(( $CPUS - 1 ))
	echo "detected $CPUS processors for parallel data generation and loading"
fi
PARALLEL_ARG=""
if [ "${CPUS}" -gt 1 ]; then
	PARALLEL_ARG="-PARALLEL ${CPUS}"
fi

# Generate refresh data
for J in `seq 1 $(( $STREAMS * 2 ))`; do
	for I in `seq 1 $CPUS`; do
		DMDIR=${DS_DATA}/${J}
		mkdir -p $DMDIR
		eval "${DSTOOLS}/dsdgen \
				-DISTRIBUTIONS ${DSDISTRIBUTIONS} \
				-DIR $DMDIR \
				-SCALE $SCALE \
				-UPDATE $J \
				${PARALLEL_ARG} \
				-CHILD $I \
				-TERMINATE N \
				-FORCE Y \
				${RNGSEED_ARG}" \
				2> /dev/null &
	done
done
wait

if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db
fi
if [ $PRIVILEGED -eq 1 ]; then
	eval dbt7-${DATABASE}-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi
dbt7-${DATABASE}-time-statistics -c

if [ "${STATS}" -eq 1 ]; then
	# Start collecting system statistics.
	ts sysstat -o "${OUTPUT_DIR}/sysstat"

	# Start collecting database statistics.
	eval "ts ${DATABASE}-stat -d ${DBT7DBNAME} -o ${OUTPUT_DIR}/dbstat"
fi

if [ $PROFILE -eq 1 ]; then
	ts profile -o "${OUTPUT_DIR}/profile" sleep 1
fi

# Execute the throughput and data maintenance tests.
for I in 1 2; do
	run_queries $I
	run_data_maintenance $I
done

if [ "${STATS}" -eq 1 ]; then
	# Stop collecting system statistics.
	ts sysstat -o "${OUTPUT_DIR}/sysstat" -s
	eval "ts ${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"
fi

dbt7-${DATABASE}-get-query-time -o $OUTPUT_DIR

# Stop the database after the test.
if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db || exit 1
fi

if [ $PROFILE -eq 1 ]; then
	echo "Generating Linux perf reports for throughput test..."
	ts profile -o "${OUTPUT_DIR}/profile" -p
fi
