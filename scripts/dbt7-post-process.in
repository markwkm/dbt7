#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

usage()
{
	echo "`basename $0` is the DBT-7 post processing script"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo ""
	echo "General options:"
	echo "  -i DIRECTORY     DBT-7 results DIRECTORY"
	echo "  -o PATH          output directory"
}

cleanup()
{
	if [ "${TMPDIR}" = "" ]; then
		rm -rf "${TMPDIR}"
	fi
}

get_time()
{
	NAME=$1
	TIMEFILE=$2
	FIELD=$3

	if [ ! -f "$TIMEFILE" ]; then
		return
	fi
	V=`grep "\<${NAME}\>" $TIMEFILE | cut -d "," -f $FIELD`
	if [ "x${V}" = "x" ]; then
		V="-1"
	fi
	echo $V
}

TMPDIR=""
trap cleanup INT QUIT ABRT TERM

while getopts "i:o:" OPT; do
	case $OPT in
	i)
		RESULTSDIR="${OPTARG}"
		;;
	o)
		OUTPUT_DIR=$OPTARG
		;;
	\?)
		exit 1
		;;
	esac
done

LOADDIR="${RESULTSDIR}/load"
POWERDIR="${RESULTSDIR}/power"
THROUGHPUTDIR="${RESULTSDIR}/throughput"

if [ -d "$LOADDIR" ]; then
	TIMEFILE="${LOADDIR}/time_statistics.csv"
	LOADTIME=`get_time LOADTEST $TIMEFILE 6`
	LOADTIMEH=`get_time LOADTEST $TIMEFILE 7`
	LOADSTART=`get_time LOADTEST $TIMEFILE 4`
	LOADEND=`get_time LOADTEST $TIMEFILE 5`
fi

if [ -d "$POWERDIR" ]; then
	TIMEFILE="${POWERDIR}/time_statistics.csv"
	POWERTIME=`get_time POWER $TIMEFILE 6`
	POWERTIMEH=`get_time POWER $TIMEFILE 7`
	POWERSTART=`get_time POWER $TIMEFILE 4`
	POWEREND=`get_time POWER $TIMEFILE 5`
fi

TIMEFILE="${THROUGHPUTDIR}/time_statistics.csv"
if [ -d "$THROUGHPUTDIR" ]; then
	Sq="$(cat "${THROUGHPUTDIR}/streams")"

	THROUGHPUTTIME1=`get_time THROUGHPUT1 $TIMEFILE 6`
	THROUGHPUTTIMEH1=`get_time THROUGHPUT1 $TIMEFILE 7`
	THROUGHPUTSTART1=`get_time THROUGHPUT1 $TIMEFILE 4`
	THROUGHPUTEND1=`get_time THROUGHPUT1 $TIMEFILE 5`

	THROUGHPUTTIME2=`get_time THROUGHPUT2 $TIMEFILE 6`
	THROUGHPUTTIMEH2=`get_time THROUGHPUT2 $TIMEFILE 7`
	THROUGHPUTSTART2=`get_time THROUGHPUT2 $TIMEFILE 4`
	THROUGHPUTEND2=`get_time THROUGHPUT2 $TIMEFILE 5`

	DMTIME1=`get_time DATAMAINT1 $TIMEFILE 6`
	DMTIMEH1=`get_time DATAMAINT1 $TIMEFILE 7`
	DMSTART1=`get_time DATAMAINT1 $TIMEFILE 4`
	DMEND1=`get_time DATAMAINT1 $TIMEFILE 5`

	DMTIME2=`get_time DATAMAINT2 $TIMEFILE 6`
	DMTIMEH2=`get_time DATAMAINT2 $TIMEFILE 7`
	DMSTART2=`get_time DATAMAINT2 $TIMEFILE 4`
	DMEND2=`get_time DATAMAINT2 $TIMEFILE 5`
fi

TMPDIR=$(mktemp -d)
DBFILE="${TMPDIR}/dbt7.db"

SF=$(grep scale: ${RESULTSDIR}/config.txt | cut -d " " -f 2)
Q="${Sq}.0 * 99.0"
TPT="(${POWERTIMEH} * ${Sq}.0 / 3600.0)"
TTT="((${THROUGHPUTTIMEH1} + ${THROUGHPUTTIMEH2}) / 3600.0)"
TDM="((${DMTIMEH1} + ${DMTIMEH2}) / 3600.0)"
TLD="(0.01 * ${Sq}.0 * ${LOADTIMEH})"

QPHFILE="${OUTPUT_DIR}/qph"
sqlite3 "${DBFILE}" << EOF > "${QPHFILE}"
SELECT cast((${SF}.0 * ${Q})
     / pow(${TPT} * ${TTT} * ${TDM} * ${TLD}, 1.0 / 4.0) AS INT);
EOF
read QPH < "${QPHFILE}"

SUMMARY="${OUTPUT_DIR}/summary.rst"

cat << __EOF__ > $SUMMARY
=======================
Database Test 7 Results
=======================

**These results are not comparable to TPC Benchmark(TM) DS Results.**

* Queries per Hour: $QPH
* Scale: $SF
* Number of Query Streams: $Sq

Start and End Times
===================

=================  ====================  ====================  ================
Test               Start Timestamp       End Timestamp         Elapsed Time
=================  ====================  ====================  ================
Database Load      $LOADSTART   $LOADEND   $LOADTIME
Power Test         $POWERSTART   $POWEREND   $POWERTIME
Throughput Run 1   $THROUGHPUTSTART1   $THROUGHPUTEND1   $THROUGHPUTTIME1
Refresh Run 1      $DMSTART1   $DMEND1   $DMTIME1
Throughput Run 2   $THROUGHPUTSTART2   $THROUGHPUTEND2   $THROUGHPUTTIME2
Refresh Run 2      $DMSTART2   $DMEND2   $DMTIME2
=================  ====================  ====================  ================

Timing Intervals (in seconds)
=============================

__EOF__

if [ ! -f "$TIMEFILE" ]; then
	echo "time statistics missing for throughput tests" >> $SUMMARY
	exit 1
fi

cat << EOF >> "${SUMMARY}"
==  =======  =======  =======  ========  =======  =======  =======  ========  =======  =======
 Q       Minimum       25th Percentile        Median        75th Percentile       Maximum
--  ----------------  -----------------  ----------------  -----------------  ----------------
 #   Run1     Run2     Run1      Run2     Run1     Run2     Run1      Run2     Run1     Run2
==  =======  =======  =======  ========  =======  =======  =======  ========  =======  =======
EOF

sqlite3 "${DBFILE}" << EOF
CREATE TABLE qtime(
    stream INTEGER
  , query INTEGER
  , template TEXT
  , s_time TEXT
  , e_time TEXT
  , elapsed_time TEXT
  , diff_time REAL
);
.mode csv
.import ${TIMEFILE} qtime
EOF

for Q in $(seq 1 99); do
	MIN1="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT min(diff_time)
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream <= $Sq
		;
	EOF
	)"

	MIN2="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT min(diff_time)
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream > $Sq
		;
	EOF
	)"

	Q25_1="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream <= $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 / 4.0 AS INT)
		;
	EOF
	)"

	Q25_2="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream > $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 / 4.0 AS INT)
		;
	EOF
	)"

	MEDIAN1="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream <= $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 / 2.0 AS INT)
		;
	EOF
	)"

	MEDIAN2="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream > $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 / 2.0 AS INT)
		;
	EOF
	)"

	Q75_1="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream <= $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 * 0.75 AS INT)
		;
	EOF
	)"

	Q75_2="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT diff_time
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream > $Sq
		ORDER BY diff_time ASC
		LIMIT 1
		OFFSET cast(${Sq}.0 * 0.75 AS INT)
		;
	EOF
	)"

	MAX1="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT max(diff_time)
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream <= $Sq
		;
	EOF
	)"

	MAX2="$(sqlite3 "${DBFILE}" <<- EOF
		SELECT max(diff_time)
		FROM qtime
		WHERE template REGEXP '\D${Q}\D'
		  AND stream > $Sq
		;
	EOF
	)"

	printf "%2d  %7.1f  %7.1f  %7.1f   %7.1f  %7.1f  %7.1f  %7.1f   %7.1f  %7.1f  %7.1f\n" \
			${Q} \
			${MIN1} \
			${MIN2} \
			${Q25_1} \
			${Q25_2} \
			${MEDIAN1} \
			${MEDIAN2} \
			${Q75_1} \
			${Q75_2} \
			${MAX1} \
			${MAX2} \
			>> "${SUMMARY}"
done

cat << EOF >> "${SUMMARY}"
==  =======  =======  =======  ========  =======  =======  =======  ========  =======  =======
EOF

cleanup
