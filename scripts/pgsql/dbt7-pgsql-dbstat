#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2007 Open Source Development Labs, Inc.
#               2003-2007 Jenny Zhang
#               2014      2ndQuadrant, Ltd.
#               2014-2022 Mark Wong

SAMPLE_LENGTH=60

usage()
{
	echo "`basename $0` is the DBT-7 PostgreSQL statistics collector"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTION]"
	echo ""
	echo "Options:"
	echo "  -o PATH          path to save results"
	echo "  -s               sample length, default $SAMPLE_LENGTH"
	echo "  -S               stop any running stats collection"
}

STOP=0
while getopts "ho:s:S" OPT; do
	case $OPT in
	h)
		usage
		exit 0
		;;
	o)
		OUTPUT_DIR=$OPTARG
		;;
	s)
		SAMPLE_LENGTH=$OPTARG
		;;
	S)
		STOP=1
		;;
	\?)
		usage
		exit 1
	esac
done

if [ "x$OUTPUT_DIR" = "x" ]; then
	echo "use -o flag"
	exit 1
fi

if [ -z $DBT7DBNAME ]; then
	echo "Error: DBT7DBNAME environment variable not defined"
	exit 1
fi

PIDFILE="${OUTPUT_DIR}/dbstat.pid"

if [ $STOP -eq 1 ]; then
	if [ -f "$PIDFILE" ]; then
		read DBSTATPID < $PIDFILE
		kill $DBSTATPID
	fi
	exit 0
fi

if [ -f "$PIDFILE" ]; then
	echo "dbstat pidfile already exists, exiting"
	exit 1
fi

PSQL="psql -v ON_ERROR_STOP=1 -X -t --no-align -d $DBT7DBNAME"

DBOUTPUT_DIR=${OUTPUT_DIR}/db
mkdir -p $DBOUTPUT_DIR

LOCKSTAT="SELECT EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP()) AS ctime, * \
FROM pg_locks, pg_class \
WHERE relfilenode = relation \
ORDER BY relname"

DBACTIVITY="SELECT EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP()) AS ctime, * \
FROM pg_stat_activity"

STATDB="SELECT EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP()) AS ctime, \
datname, numbackends, xact_commit, xact_rollback, blks_read, blks_hit, \
tup_returned, tup_fetched, tup_inserted, tup_updated, tup_deleted \
FROM pg_stat_database"

STATTABLE="SELECT EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP()) AS ctime, * \
FROM pg_statio_all_tables a, pg_stat_all_tables b \
WHERE a.relid = b.relid"

STATINDEX="SELECT EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP()) AS ctime, * \
FROM pg_stat_all_indexes a, pg_statio_all_indexes b \
WHERE a.indexrelid = b.indexrelid"

# put db info into the readme.txt file
$PSQL -c "SELECT version();" >> ${OUTPUT_DIR}/readme.txt

# save the database parameters
$PSQL -c "SELECT name, setting, source FROM pg_settings ORDER BY lower(name);" \
		-o $OUTPUT_DIR/param.txt

# record tables
$PSQL -c "SELECT tablename "`
		`"FROM pg_tables "`
		`"WHERE schemaname = 'public'"`
		`"ORDER BY tablename;" -o ${DBOUTPUT_DIR}/table-list.txt

# record indexes
$PSQL -c "SELECT indexname "`
		`"FROM pg_indexes "`
		`"WHERE schemaname = 'public' "`
		`"ORDER BY indexname;" -o ${DBOUTPUT_DIR}/index-list.txt

# Take the initial data points with headers so that data is identifiable later.
$PSQL -c "COPY (${LOCKSTAT}) TO STDOUT (FORMAT CSV, HEADER);" \
		> ${DBOUTPUT_DIR}/lockstats.csv &

$PSQL -c "COPY (${DBACTIVITY}) TO STDOUT (FORMAT CSV, HEADER);" \
		> ${DBOUTPUT_DIR}/db_activity.csv &

$PSQL -c "COPY (${STATDB}) TO STDOUT (FORMAT CSV, HEADER);" \
		> ${DBOUTPUT_DIR}/pg_stat_databases.csv &

$PSQL -c "COPY (${STATTABLE}) TO STDOUT (FORMAT CSV, HEADER);" \
		> ${DBOUTPUT_DIR}/pg_stat_tables.csv &

$PSQL -c "COPY (${STATINDEX}) TO STDOUT (FORMAT CSV, HEADER);" \
		> ${DBOUTPUT_DIR}/pg_stat_indexes.csv &

while [ 1 ]; do
	sleep $SAMPLE_LENGTH

	$PSQL -c "COPY (${LOCKSTAT}) TO STDOUT (FORMAT CSV);" \
			>> ${DBOUTPUT_DIR}/lockstats.csv &

	$PSQL -c "COPY (${DBACTIVITY}) TO STDOUT (FORMAT CSV);" \
			>> ${DBOUTPUT_DIR}/db_activity.csv &

	$PSQL -c "COPY (${STATDB}) TO STDOUT (FORMAT CSV);" \
			>> ${DBOUTPUT_DIR}/pg_stat_databases.csv &

	$PSQL -c "COPY (${STATTABLE}) TO STDOUT (FORMAT CSV);" \
			>> ${DBOUTPUT_DIR}/pg_stat_tables.csv &

	$PSQL -c "COPY (${STATINDEX}) TO STDOUT (FORMAT CSV);" \
			>> ${DBOUTPUT_DIR}/pg_stat_indexes.csv &
done &
echo "$!" > $PIDFILE
