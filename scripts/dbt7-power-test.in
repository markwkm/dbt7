#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

INPUT="templates.lst"
PRIVILEGED=1
RESTART=0

usage()
{
	echo "Usage: `basename $0` is the DBT-7 Power Test"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTION]"
	echo ""
	echo "Options:"
	echo "  -a DBMS          database management system: pgsql"
	echo "  -d DIALECT       dialect override"
	echo "  -o PATH          path to save results"
	echo "  -i INPUT         input override, default $INPUT"
	echo "  -r               restart database, if already running"
	echo "  -s SCALE         scale factor, default $SCALE"
	echo "  -U               run test as an unprivileged user"
	echo "  -Y               enable profiling"
	echo ""
	echo "PostgreSQL options (pgsql):"
	echo "  -p PARAMETERS    PostgreSQL parameters"
}

while getopts "a:d:hi:p:o:rs:UY" OPT; do
	case $OPT in
	a)
		DATABASE=$OPTARG
		;;
	d)
		DIALECT=$OPTARG
		;;
	h)
		usage
		exit 0
		;;
	i)
		INPUT=$OPTARG
		;;
	o)
		OUTPUT_DIR=$OPTARG
		mkdir -p $OUTPUT_DIR
		;;
	p)
		PARAMETERS_ARG="-p \"$OPTARG\""
		;;
	r)
		RESTART=1
		;;
	s)
		SCALE=$OPTARG
		;;
	U)
		PRIVILEGED=0
		;;
	Y)
		# TODO: Current implementation doesn't allow profiling by query, no-op.
		;;
	\?)
		usage
		exit 1
		;;
	esac
done

if [ "x${DATABASE}" = "x" ]; then
	2&> echo "Error: Specify database management system with -a flag"
	usage
	exit 1
fi

if [ "x${DSTOOLS}" = "x" ]; then
	>&2 echo "Error: DSTOOLS environment variable not set"
	exit 1
fi
if [ ! -d $DSTOOLS ]; then
	2&> echo "Error: DSTOOLS dir does not exist: $DSTOOLS"
	exit 2
fi

if [ "x${DIALECT}" = "x" ]; then
	DIALECT=$DATABASE
fi

echo "**`date` power test prep**"

# If a seed file wasn't provided per spec, then don't specify one.
SEED_FILE="${OUTPUT_DIR}/../seed"
if [ -f "$SEED_FILE" ]; then
	read SEED < $SEED_FILE
	echo "Using generated seed file: $SEED"
	RNGSEED_ARG="-RNGSEED $SEED"
fi

# Save dsdgen info.
(cd "${DSTOOLS}" && \
		./dsdgen -TABLE dbgen_version \
				-DIR $OUTPUT_DIR \
				-SCALE $SCALE \
				$RNGSEED_ARG \
				> ${OUTPUT_DIR}/dsdgen.txt 2>&1 \
) || exit 1

# Generate the queries.  Clause 4.3.2
(cd "${DSTOOLS}" && \
		./dsqgen -DIALECT $DIALECT \
				-OUTPUT_DIR $OUTPUT_DIR \
				-SCALE $SCALE \
				-DIRECTORY $DSQUERY \
				-STREAMS 1 \
				-INPUT ../query_templates/$INPUT \
				$TEMPLATE_ARG \
				$RNGSEED_ARG \
				> ${OUTPUT_DIR}/dsqgen.txt 2>&1 \
) || exit 1

if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db || exit 1
fi
if [ $PRIVILEGED -eq 1 ]; then
	eval dbt7-${DATABASE}-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

dbt7-${DATABASE}-time-statistics -c

# Start collecting system statistics.
ts-sysstat -o "${OUTPUT_DIR}/sysstat"

# Collect database statistics
eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat"

echo "**`date` power test starting**"

# Execute the queries.
S_TIME_POWER=`date +%s`
dbt7-${DATABASE}-time-statistics -s -n POWER
dbt7-${DATABASE}-run-stream -s 0 -o $OUTPUT_DIR
dbt7-${DATABASE}-time-statistics -e -n POWER
E_TIME_POWER=`date +%s`

DIFF_TIME=$(( $E_TIME_POWER - $S_TIME_POWER ))
echo "**`date` power test completed ($DIFF_TIME seconds)**"

# Stop collecting system statistics.
ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s
eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"

dbt7-${DATABASE}-get-query-time -o $OUTPUT_DIR

if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db || exit 1
fi
