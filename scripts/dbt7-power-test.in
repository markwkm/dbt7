#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-7 Authors

PRIVILEGED=1
RESTART=0
STATS=0

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 7 (DBT-7) power tester

Usage:
  $(basename "${0}") [OPTION]

Options:
  -a DBMS          database management system: pgsql
  -d DIALECT       dialect override
  -o PATH          path to save results
  -r               restart database, if already running
  -s SCALE         scale factor, default $SCALE
  --stats          enable system and database stats collection
  -U               run test as an unprivileged user
  -V, --version    output version information, then exit
  -Y               enable profiling"
  -?, --help       show this help, then exit

DBMS options are:
  pgsql            PostgreSQL

PostgreSQL options (pgsql):
  -p PARAMETERS    PostgreSQL parameters

@HOMEPAGE@
EOF
}

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-a)
		shift
		DATABASE="${1}"
		;;
	(-d)
		shift
		DIALECT="${1}"
		;;
	(-i)
		shift
		INPUT_ARG="-INPUT ${1}"
		;;
	(-o)
		shift
		OUTPUT_DIR="${1}"
		mkdir -p $OUTPUT_DIR
		;;
	(-p)
		shift
		PARAMETERS_ARG="-p \"${1}\""
		;;
	(-r)
		RESTART=1
		;;
	(-s)
		shift
		SCALE="${1}"
		;;
	(--stats)
		STATS=1
		;;
	(-U)
		PRIVILEGED=0
		;;
	(-V | --version)
		echo "$(basename "${0}") (Database Test 7) v@PROJECT_VERSION@"
		;;
	(-Y)
		# TODO: Current implementation doesn't allow profiling by query, no-op.
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "x${DATABASE}" = "x" ]; then
	2&> echo "Error: Specify database management system with -a flag"
	usage
	exit 1
fi

if [ "x${DSTOOLS}" = "x" ]; then
	>&2 echo "Error: DSTOOLS environment variable not set"
	exit 1
fi
if [ ! -d $DSTOOLS ]; then
	2&> echo "Error: DSTOOLS dir does not exist: $DSTOOLS"
	exit 2
fi

if [ "x${DIALECT}" = "x" ]; then
	DIALECT=$DATABASE
fi

echo "**`date` power test prep**"

# If a seed file wasn't provided per spec, then don't specify one.
SEED_FILE="${OUTPUT_DIR}/../seed"
if [ -f "$SEED_FILE" ]; then
	read SEED < $SEED_FILE
	echo "Using generated seed file: $SEED"
	RNGSEED_ARG="-RNGSEED $SEED"
fi

# Save dsdgen info.
eval "${DSTOOLS}/dsdgen \
		-DISTRIBUTIONS ${DSDISTRIBUTIONS} \
		-TABLE dbgen_version \
		-DIR $OUTPUT_DIR \
		-SCALE $SCALE \
		${RNGSEED_ARG}" \
		> ${OUTPUT_DIR}/dsdgen.txt 2>&1 || exit 1

# Generate the queries.  Clause 4.3.2
eval "${DSTOOLS}/dsqgen \
		-DISTRIBUTIONS ${DSDISTRIBUTIONS} \
		-DIALECT $DIALECT \
		-OUTPUT_DIR $OUTPUT_DIR \
		-SCALE $SCALE \
		-DIRECTORY $DSQUERY \
		-STREAMS 1 \
		$INPUT_ARG \
		$TEMPLATE_ARG \
		${RNGSEED_ARG}" \
		> ${OUTPUT_DIR}/dsqgen.txt 2>&1 || exit 1

if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db || exit 1
fi
if [ $PRIVILEGED -eq 1 ]; then
	eval dbt7-${DATABASE}-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1
fi

dbt7-${DATABASE}-time-statistics -c

if [ "${STATS}" -eq 1 ]; then
	# Start collecting system statistics.
	ts-sysstat -o "${OUTPUT_DIR}/sysstat"

	# Collect database statistics
	eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat"
fi

echo "**`date` power test starting**"

# Execute the queries.
S_TIME_POWER=`date +%s`
dbt7-${DATABASE}-time-statistics -s -n POWER
dbt7-${DATABASE}-run-stream -s 0 -o $OUTPUT_DIR
dbt7-${DATABASE}-time-statistics -e -n POWER
E_TIME_POWER=`date +%s`

DIFF_TIME=$(( $E_TIME_POWER - $S_TIME_POWER ))
echo "**`date` power test completed ($DIFF_TIME seconds)**"

if [ "${STATS}" -eq 1 ]; then
	# Stop collecting system statistics.
	ts-sysstat -o "${OUTPUT_DIR}/sysstat" -s
	eval "ts-${DATABASE}-stat -o ${OUTPUT_DIR}/dbstat -s"
fi

dbt7-${DATABASE}-get-query-time -o $OUTPUT_DIR

if [ $RESTART -eq 1 ] && [ $PRIVILEGED -eq 1 ]; then
	dbt7-${DATABASE}-stop-db || exit 1
fi
